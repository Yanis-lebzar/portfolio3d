import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { Canvas, useFrame } from "@react-three/fiber";
import SpaceBar from "../models/SpaceBar.js";
import { Suspense, useState, useLayoutEffect, useRef, useEffect } from "react";
import {
  OrbitControls,
  OrthographicCamera,
  PerspectiveCamera,
} from "@react-three/drei";
import { animated, useSpring } from "@react-spring/web";
import GradientPlane from "@/models/GradientPlane.js";
import { useControls } from "leva";
import gsap from "gsap";
import { motion, AnimatePresence } from "framer-motion";
import {
  motion as motion3d,
  MotionCanvas,
  LayoutCamera,
  LayoutOrthographicCamera,
} from "framer-motion-3d";

import { Router, useRouter } from "next/router";
import WavyPlane from "@/components/WavyPlane.js";
import ResponsiveOrthographicCamera from "@/components/ResponsiveOrthographicCamera.js";
import LeftKey from "@/models/LeftKey.js";
import RightKey from "@/models/RightKey.js";
import KeysScene from "@/components/keysScene.js";

export default function Home() {
  const [spacePressed, setSpacePressed] = useState(false);
  const [leftArrowPressed, setLeftArrowPressed] = useState(false);
  const [rightArrowPressed, setRightArrowPressed] = useState(false);

  const [intervalTime, setIntervalTime] = useState(1000);
  const [gradientZoom, setGradientZoom] = useState(false);
  const router = useRouter();
  let color = gradientZoom ? "#00ffff" : "#88d2f1";

  const [wordSplited, setSplitedWord] = useState([]);
  const words = [
    "Hello world",
    "Hola mundo",
    "Salam",
    "こんにちは",
    "안녕하세요",
  ];

  const { bgColor } = useSpring({
    from: { bgColor: "black" },
    to: { bgColor: gradientZoom ? "#000000cd" : "#0000002b" },
    config: { duration: 1000 },
  });
  // console.log(intervalTime);
  // making the text animation start quickly on mount and then take the normal intervalTime
  useEffect(() => {
    setTimeout(() => {
      setIntervalTime(1800);
    }, 1600);
    setTimeout(() => {
      setIntervalTime(4000);
    }, 5500);
  }, []);
  // console.log(intervalTime);
  useEffect(() => {
    let index = 0;
    const interval = setInterval(() => {
      let word = words[index];
      setSplitedWord(Array.from(word));
      // console.log(wordSplited);
      // console.log(word);

      index++;
      if (index === words.length) {
        index = 0;
      }
    }, intervalTime);
    return () => clearInterval(interval);
  }, [intervalTime]);

  function handleKeyDown(event) {
    if (event.key === " ") {
      setSpacePressed(true);
      setGradientZoom(!gradientZoom);
      let homeUrl = "/";
      let galleryUrl = "project-gallery";
      if (window.location.href.includes("project-gallery")) {
        history.pushState({}, "", "/");
      } else {
        history.pushState({}, "", galleryUrl);
      }
    }

    if (event.key === "ArrowLeft") {
      setLeftArrowPressed(true);
    }
    if (event.key === "ArrowRight") {
      setRightArrowPressed(true);
    }
  }

  function handleKeyUp(event) {
    if (event.key === " ") {
      setSpacePressed(false);
    }

    if (event.key === "ArrowLeft") {
      setLeftArrowPressed(false);
      console.log("désappuyé lef");
    }

    if (event.key === "ArrowRight") {
      setRightArrowPressed(false);
    }
  }

  // spacePressed ? router.push("/projects") : "";
  const { position, zoom } = useControls({
    zoom: { value: 1, step: 0.1 },
    position: { value: [0, 0, 0], step: 10.0 },
  });

  // console.log(gradientZoom);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
      </Head>

      {/* Background gradient */}

      <animated.main className="main">
        <Suspense fallback={null}>
          <Canvas
            shadows
            flat
            linear
            gl={{ antialias: true }}
            camera={{
              fov: 85,
            }}
          >
            <GradientPlane gradientZoom={gradientZoom} color={color} />
            <directionalLight
              name="Directional Light"
              castShadow
              intensity={1.21}
              shadow-mapSize-width={1024}
              shadow-mapSize-height={1024}
              shadow-camera-near={-10000}
              shadow-camera-far={100000}
              shadow-camera-left={-1210.774}
              shadow-camera-right={1210.774}
              shadow-camera-top={1210.774}
              shadow-camera-bottom={-1210.774}
              color="#fefefe"
              position={[154.86, 1304.58, -2219.09]}
              rotation={[0, 0.25, 0]}
            />

            <OrbitControls />
          </Canvas>
        </Suspense>
      </animated.main>

      {/* UI above gradient */}

      <animated.div
        className="mainUi"
        style={{ outline: "none", backgroundColor: bgColor }}
        onKeyDown={handleKeyDown}
        onKeyUp={handleKeyUp}
        tabIndex={0}
      >
        {/* Space bar */}
        <animated.div className="canvasSpacebar">
          <AnimatePresence>
            <motion.div
              style={{ width: "100%", height: "100vh", zIndex: 100 }}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 3, duration: 1 }}
            >
              <Canvas shadows flat linear gl={{ antialias: true }}>
                <KeysScene
                  gradientZoom={gradientZoom}
                  leftArrowPressed={leftArrowPressed}
                  rightArrowPressed={rightArrowPressed}
                  spacePressed={spacePressed}
                />
                {/* <OrbitControls />
                <OrthographicCamera
                  ref={cameraSpaceBarRef}
                  makeDefault={true}
                  fov={80}
                  far={100000}
                  near={-100000}
                  zoom={1.25}
                  position={(0, 0, 0)}
                />

                {gradientZoom ? (
                  <motion3d.group
                    initial={{
                      y: -30,
                      opacity: 0,
                      transition: {
                        duration: 1.5,
                      },
                    }}
                    animate={{
                      y: 0,
                      opacity: 1,
                      transition: {
                        duration: 1.5,
                        delay: 2.5,
                      },
                    }}
                  >
                    <LeftKey leftArrowPressed={leftArrowPressed} />
                    <RightKey rightArrowPressed={rightArrowPressed} />{" "}
                  </motion3d.group>
                ) : null}

                <SpaceBar
                  gradientZoom={gradientZoom}
                  spacePressed={spacePressed}
                /> */}
              </Canvas>
            </motion.div>
          </AnimatePresence>
        </animated.div>

        {/* Texts */}

        <div className="text">
          <AnimatePresence>
            {!gradientZoom ? (
              <motion.div
                key={wordSplited}
                initial="hidden"
                animate="visible"
                exit="exit"
                variants={list}
                className="text"
              >
                {wordSplited?.map((letter, key) => {
                  return (
                    <motion.span variants={item} key={key}>
                      {letter === " " ? "\u00A0" : letter}
                    </motion.span>
                  );
                })}
              </motion.div>
            ) : null}
          </AnimatePresence>
          <AnimatePresence>
            {!gradientZoom ? (
              <motion.h2
                initial={{ opacity: 0 }}
                animate={{
                  opacity: 1,
                  transition: {
                    duration: 1,
                    delay: 2,
                  },
                }}
                exit={{ opacity: 0, transition: { duration: 1 } }}
              >
                Tap space to entry
              </motion.h2>
            ) : null}
          </AnimatePresence>
        </div>

        <AnimatePresence>
          {gradientZoom ? (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: gradientZoom ? 1 : 0 }}
              exit={{ opacity: 0, transition: { delay: 0 } }}
              transition={{ delay: 1.5, duration: 1.5 }}
              className="wavyPlane"
            >
              <WavyPlane />
            </motion.div>
          ) : null}
        </AnimatePresence>
      </animated.div>
    </>
  );
}

const list = {
  visible: (i = 1) => ({
    opacity: 1,

    transition: {
      duration: 0.1,
      delayChildren: 0.1 * i,
      staggerChildren: 0.15,
    },
  }),

  hidden: {
    opacity: 0,

    transition: {
      duration: 0.1,
      delayChildren: 0.1,
      staggerChildren: 0.15,
    },
  },
  exit: (i = 1) => ({
    opacity: 0,
    y: -400,
    transition: {
      duration: 2,
      delayChildren: 0.1 * i,
      staggerChildren: 0.15,
    },
  }),
};
const item = {
  visible: {
    opacity: 1,
    y: 0,
    transition: { type: "spring", stiffness: 100, damping: 10 },
  },
  hidden: {
    opacity: 0,
    y: 10,
    transition: { type: "spring", stiffness: 100, damping: 12 },
  },
  exit: {
    opacity: 0,
    y: -40,
    transition: {
      type: "spring",
      stiffness: 100,
      damping: 12,
    },
  },
};
