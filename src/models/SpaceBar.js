/*
  Auto-generated by Spline
*/

import { animated, useSpring, config } from "@react-spring/three";
import { motion, MotionCanvas, LayoutCamera } from "framer-motion-3d";

import useSpline from "@splinetool/r3f-spline";
import { Float, OrbitControls, OrthographicCamera } from "@react-three/drei";
import { useFrame, extend } from "@react-three/fiber";
import { useRef } from "react";
import { inverseLerp } from "three/src/math/MathUtils.js";

export default function SpaceBar({ ...props }) {
  const key = useRef();
  const spaceBarRef = useRef();
  const { position, color } = useSpring({
    position: [0, props.spacePressed ? -90 : 0, 0],
    color: props.spacePressed ? "black" : "white",
    config: { duration: 70 },
  });

  useFrame((state, delta) => {
    const t = state.clock.getElapsedTime();

    spaceBarRef.current.rotation.x = Math.PI / 2 / 1.55 + Math.cos(t / 2) / 20;
    spaceBarRef.current.rotation.y = Math.cos(t / 2) / 20;
    spaceBarRef.current.rotation.z = (-0.5 + Math.sin(t / 2)) / 30;
  });
  const { nodes, materials } = useSpline(
    "https://prod.spline.design/guQre2TCcnMDvqLK/scene.splinecode"
  );
  return (
    <>
      <color args={[""]} />

      <motion.group
        {...props}
        dispose={null}
        initial={{
          y: -30,
          transition: {
            y: {
              duration: 1.5,
              delay: 0.5,
            },
          },
        }}
        animate={{
          y: props.gradientZoom ? -180 : 0,
          transition: {
            y: {
              duration: 1.5,
              delay: 0,
            },
          },
        }}
        transition={{
          scale: {
            duration: 2,
            delay: 0.5,
          },
        }}
      >
        <group
          name="spaceBar"
          position={[0, -200, 10000]}
          rotation={[0.8, 0, 0]} //0.8
          scale={0.18}
          ref={spaceBarRef}
        >
          <animated.group ref={key} name="Group" position={position}>
            <mesh
              name="Text"
              geometry={nodes.Text.geometry}
              material={materials["Text Material"]}
              castShadow
              receiveShadow
              position={[-11.92, 492, -147.66]}
              rotation={[-Math.PI / 2, 0, 0]}
            />
            <mesh
              name="Cube"
              geometry={nodes.Cube.geometry}
              material={nodes.Cube.material}
              castShadow
              receiveShadow
              position={[-12.8, 329.82, -164.84]}
              scale={[0.45, 1, 1]}
            />
          </animated.group>
          <mesh
            name="Rectangle 8"
            geometry={nodes["Rectangle 8"].geometry}
            material={materials["Rectangle 8 Material"]}
            castShadow
            receiveShadow
            position={[-23.91, 61, -169.71]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={1}
          />
          <mesh
            name="Rectangle 7"
            geometry={nodes["Rectangle 7"].geometry}
            material={materials["Rectangle 7 Material"]}
            castShadow
            receiveShadow
            position={[-15.88, 138.09, -167.5]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={1}
          />
        </group>

        <hemisphereLight
          name="Default Ambient Light"
          intensity={1.35}
          color="#eaeaea"
        />
      </motion.group>
    </>
  );
}
